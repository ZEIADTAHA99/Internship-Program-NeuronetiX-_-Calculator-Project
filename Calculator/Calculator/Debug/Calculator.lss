
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000580  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000eeb  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000869  00000000  00000000  000015bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000094a  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00002770  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000449  00000000  00000000  0000286c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006cc  00000000  00000000  00002cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003381  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b9 01 	call	0x372	; 0x372 <main>
  64:	0c 94 be 02 	jmp	0x57c	; 0x57c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <keypad_init>:


void keypad_init(void)
{
	// OUTPUT Directions Pins PORTA (DDRA)
	setbit(Keypad_out_dir,0);
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	8a bb       	out	0x1a, r24	; 26
	setbit(Keypad_out_dir,1);
  72:	8a b3       	in	r24, 0x1a	; 26
  74:	82 60       	ori	r24, 0x02	; 2
  76:	8a bb       	out	0x1a, r24	; 26
	setbit(Keypad_out_dir,2);
  78:	8a b3       	in	r24, 0x1a	; 26
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	8a bb       	out	0x1a, r24	; 26
	setbit(Keypad_out_dir,3);
  7e:	8a b3       	in	r24, 0x1a	; 26
  80:	88 60       	ori	r24, 0x08	; 8
  82:	8a bb       	out	0x1a, r24	; 26
	//INPUT Directions PINS PORTA (DDRA)
	clearbit(Keypad_in_dir,4);
  84:	8a b3       	in	r24, 0x1a	; 26
  86:	8f 7e       	andi	r24, 0xEF	; 239
  88:	8a bb       	out	0x1a, r24	; 26
	clearbit(Keypad_in_dir,5);
  8a:	8a b3       	in	r24, 0x1a	; 26
  8c:	8f 7d       	andi	r24, 0xDF	; 223
  8e:	8a bb       	out	0x1a, r24	; 26
	clearbit(Keypad_in_dir,6);
  90:	8a b3       	in	r24, 0x1a	; 26
  92:	8f 7b       	andi	r24, 0xBF	; 191
  94:	8a bb       	out	0x1a, r24	; 26
	clearbit(Keypad_in_dir,7);
  96:	8a b3       	in	r24, 0x1a	; 26
  98:	8f 77       	andi	r24, 0x7F	; 127
  9a:	8a bb       	out	0x1a, r24	; 26
	// internal pull up resistor for input pins //
	setbit(Keypad_in_port,4);
  9c:	8b b3       	in	r24, 0x1b	; 27
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	8b bb       	out	0x1b, r24	; 27
	setbit(Keypad_in_port,5);
  a2:	8b b3       	in	r24, 0x1b	; 27
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	8b bb       	out	0x1b, r24	; 27
	setbit(Keypad_in_port,6);
  a8:	8b b3       	in	r24, 0x1b	; 27
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	8b bb       	out	0x1b, r24	; 27
	setbit(Keypad_in_port,7);
  ae:	8b b3       	in	r24, 0x1b	; 27
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	8b bb       	out	0x1b, r24	; 27
  b4:	08 95       	ret

000000b6 <output_power>:
}


void output_power (int x)
{
	switch(x)
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	91 05       	cpc	r25, r1
  ba:	b9 f0       	breq	.+46     	; 0xea <output_power+0x34>
  bc:	1c f4       	brge	.+6      	; 0xc4 <output_power+0xe>
  be:	89 2b       	or	r24, r25
  c0:	39 f0       	breq	.+14     	; 0xd0 <output_power+0x1a>
  c2:	08 95       	ret
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	91 05       	cpc	r25, r1
  c8:	e9 f0       	breq	.+58     	; 0x104 <output_power+0x4e>
  ca:	03 97       	sbiw	r24, 0x03	; 3
  cc:	41 f1       	breq	.+80     	; 0x11e <output_power+0x68>
  ce:	08 95       	ret
	{
		case 0:
		clearbit(Keypad_out_port,0);
  d0:	8b b3       	in	r24, 0x1b	; 27
  d2:	8e 7f       	andi	r24, 0xFE	; 254
  d4:	8b bb       	out	0x1b, r24	; 27
		setbit(Keypad_out_port,1);
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	8b bb       	out	0x1b, r24	; 27
		setbit(Keypad_out_port,2);
  dc:	8b b3       	in	r24, 0x1b	; 27
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	8b bb       	out	0x1b, r24	; 27
		setbit(Keypad_out_port,3);
  e2:	8b b3       	in	r24, 0x1b	; 27
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	8b bb       	out	0x1b, r24	; 27
		break;
  e8:	08 95       	ret
		case 1:
		clearbit(Keypad_out_port,1);
  ea:	8b b3       	in	r24, 0x1b	; 27
  ec:	8d 7f       	andi	r24, 0xFD	; 253
  ee:	8b bb       	out	0x1b, r24	; 27
		setbit(Keypad_out_port,0);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	8b bb       	out	0x1b, r24	; 27
		setbit(Keypad_out_port,2);
  f6:	8b b3       	in	r24, 0x1b	; 27
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	8b bb       	out	0x1b, r24	; 27
		setbit(Keypad_out_port,3);
  fc:	8b b3       	in	r24, 0x1b	; 27
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	8b bb       	out	0x1b, r24	; 27
		break;
 102:	08 95       	ret
		case 2:
		clearbit(Keypad_out_port,2);
 104:	8b b3       	in	r24, 0x1b	; 27
 106:	8b 7f       	andi	r24, 0xFB	; 251
 108:	8b bb       	out	0x1b, r24	; 27
		setbit(Keypad_out_port,1);
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	8b bb       	out	0x1b, r24	; 27
		setbit(Keypad_out_port,0);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	81 60       	ori	r24, 0x01	; 1
 114:	8b bb       	out	0x1b, r24	; 27
		setbit(Keypad_out_port,3);
 116:	8b b3       	in	r24, 0x1b	; 27
 118:	88 60       	ori	r24, 0x08	; 8
 11a:	8b bb       	out	0x1b, r24	; 27
		break;
 11c:	08 95       	ret
		case 3:
		clearbit(Keypad_out_port,3);
 11e:	8b b3       	in	r24, 0x1b	; 27
 120:	87 7f       	andi	r24, 0xF7	; 247
 122:	8b bb       	out	0x1b, r24	; 27
		setbit(Keypad_out_port,1);
 124:	8b b3       	in	r24, 0x1b	; 27
 126:	82 60       	ori	r24, 0x02	; 2
 128:	8b bb       	out	0x1b, r24	; 27
		setbit(Keypad_out_port,0);
 12a:	8b b3       	in	r24, 0x1b	; 27
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	8b bb       	out	0x1b, r24	; 27
		setbit(Keypad_out_port,2);
 130:	8b b3       	in	r24, 0x1b	; 27
 132:	84 60       	ori	r24, 0x04	; 4
 134:	8b bb       	out	0x1b, r24	; 27
 136:	08 95       	ret

00000138 <get_key_value>:



unsigned int get_key_value(void)

{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
	unsigned int key = 1 ;
 13c:	c1 e0       	ldi	r28, 0x01	; 1
 13e:	d0 e0       	ldi	r29, 0x00	; 0
	
	while ( key == 1)
 140:	7d c0       	rjmp	.+250    	; 0x23c <get_key_value+0x104>
	{
		
		
		output_power(0);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 5b 00 	call	0xb6	; 0xb6 <output_power>
		if ( readbit(Keypad_in_pin,4) == 0 ) //pull up ressitor , so LOW
 14a:	cc 99       	sbic	0x19, 4	; 25
 14c:	05 c0       	rjmp	.+10     	; 0x158 <get_key_value+0x20>
		{
			key = '7';
			while(readbit(Keypad_in_pin,4)==0);// skip loop infinte
 14e:	cc 9b       	sbis	0x19, 4	; 25
 150:	fe cf       	rjmp	.-4      	; 0x14e <get_key_value+0x16>
		
		
		output_power(0);
		if ( readbit(Keypad_in_pin,4) == 0 ) //pull up ressitor , so LOW
		{
			key = '7';
 152:	c7 e3       	ldi	r28, 0x37	; 55
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	14 c0       	rjmp	.+40     	; 0x180 <get_key_value+0x48>
			while(readbit(Keypad_in_pin,4)==0);// skip loop infinte
		}
		else if (readbit(Keypad_in_pin,5)==0)
 158:	cd 99       	sbic	0x19, 5	; 25
 15a:	05 c0       	rjmp	.+10     	; 0x166 <get_key_value+0x2e>
		{
			key ='8';
			while(readbit(Keypad_in_pin,5)==0);
 15c:	cd 9b       	sbis	0x19, 5	; 25
 15e:	fe cf       	rjmp	.-4      	; 0x15c <get_key_value+0x24>
			key = '7';
			while(readbit(Keypad_in_pin,4)==0);// skip loop infinte
		}
		else if (readbit(Keypad_in_pin,5)==0)
		{
			key ='8';
 160:	c8 e3       	ldi	r28, 0x38	; 56
 162:	d0 e0       	ldi	r29, 0x00	; 0
 164:	0d c0       	rjmp	.+26     	; 0x180 <get_key_value+0x48>
			while(readbit(Keypad_in_pin,5)==0);
		}
		else if (readbit(Keypad_in_pin,6)==0)
 166:	ce 99       	sbic	0x19, 6	; 25
 168:	05 c0       	rjmp	.+10     	; 0x174 <get_key_value+0x3c>
		{
			key ='9';
			while(readbit(Keypad_in_pin,6)==0);
 16a:	ce 9b       	sbis	0x19, 6	; 25
 16c:	fe cf       	rjmp	.-4      	; 0x16a <get_key_value+0x32>
			key ='8';
			while(readbit(Keypad_in_pin,5)==0);
		}
		else if (readbit(Keypad_in_pin,6)==0)
		{
			key ='9';
 16e:	c9 e3       	ldi	r28, 0x39	; 57
 170:	d0 e0       	ldi	r29, 0x00	; 0
 172:	06 c0       	rjmp	.+12     	; 0x180 <get_key_value+0x48>
			while(readbit(Keypad_in_pin,6)==0);
		}
		else if (readbit(Keypad_in_pin,7)==0)
 174:	cf 99       	sbic	0x19, 7	; 25
 176:	04 c0       	rjmp	.+8      	; 0x180 <get_key_value+0x48>
		{
			key ='/';
			while(readbit(Keypad_in_pin,7)==0);
 178:	cf 9b       	sbis	0x19, 7	; 25
 17a:	fe cf       	rjmp	.-4      	; 0x178 <get_key_value+0x40>
			key ='9';
			while(readbit(Keypad_in_pin,6)==0);
		}
		else if (readbit(Keypad_in_pin,7)==0)
		{
			key ='/';
 17c:	cf e2       	ldi	r28, 0x2F	; 47
 17e:	d0 e0       	ldi	r29, 0x00	; 0
			while(readbit(Keypad_in_pin,7)==0);
		}
		output_power(1);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 5b 00 	call	0xb6	; 0xb6 <output_power>
		if (readbit(Keypad_in_pin,4)==0)
 188:	cc 99       	sbic	0x19, 4	; 25
 18a:	05 c0       	rjmp	.+10     	; 0x196 <get_key_value+0x5e>
		{
			key ='4';
			while(readbit(Keypad_in_pin,4)==0);
 18c:	cc 9b       	sbis	0x19, 4	; 25
 18e:	fe cf       	rjmp	.-4      	; 0x18c <get_key_value+0x54>
			while(readbit(Keypad_in_pin,7)==0);
		}
		output_power(1);
		if (readbit(Keypad_in_pin,4)==0)
		{
			key ='4';
 190:	c4 e3       	ldi	r28, 0x34	; 52
 192:	d0 e0       	ldi	r29, 0x00	; 0
 194:	14 c0       	rjmp	.+40     	; 0x1be <get_key_value+0x86>
			while(readbit(Keypad_in_pin,4)==0);
		}
		else if (readbit(Keypad_in_pin,5)==0)
 196:	cd 99       	sbic	0x19, 5	; 25
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <get_key_value+0x6c>
		{
			key ='5';
			while(readbit(Keypad_in_pin,5)==0);
 19a:	cd 9b       	sbis	0x19, 5	; 25
 19c:	fe cf       	rjmp	.-4      	; 0x19a <get_key_value+0x62>
			key ='4';
			while(readbit(Keypad_in_pin,4)==0);
		}
		else if (readbit(Keypad_in_pin,5)==0)
		{
			key ='5';
 19e:	c5 e3       	ldi	r28, 0x35	; 53
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
 1a2:	0d c0       	rjmp	.+26     	; 0x1be <get_key_value+0x86>
			while(readbit(Keypad_in_pin,5)==0);
		}
		else if (readbit(Keypad_in_pin,6)==0)
 1a4:	ce 99       	sbic	0x19, 6	; 25
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <get_key_value+0x7a>
		{
			key ='6';
			while(readbit(Keypad_in_pin,6)==0);
 1a8:	ce 9b       	sbis	0x19, 6	; 25
 1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <get_key_value+0x70>
			key ='5';
			while(readbit(Keypad_in_pin,5)==0);
		}
		else if (readbit(Keypad_in_pin,6)==0)
		{
			key ='6';
 1ac:	c6 e3       	ldi	r28, 0x36	; 54
 1ae:	d0 e0       	ldi	r29, 0x00	; 0
 1b0:	06 c0       	rjmp	.+12     	; 0x1be <get_key_value+0x86>
			while(readbit(Keypad_in_pin,6)==0);
		}
		else if (readbit(Keypad_in_pin,7)==0)
 1b2:	cf 99       	sbic	0x19, 7	; 25
 1b4:	04 c0       	rjmp	.+8      	; 0x1be <get_key_value+0x86>
		{
			key ='*';
			while(readbit(Keypad_in_pin,7)==0);
 1b6:	cf 9b       	sbis	0x19, 7	; 25
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <get_key_value+0x7e>
			key ='6';
			while(readbit(Keypad_in_pin,6)==0);
		}
		else if (readbit(Keypad_in_pin,7)==0)
		{
			key ='*';
 1ba:	ca e2       	ldi	r28, 0x2A	; 42
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
			while(readbit(Keypad_in_pin,7)==0);
		}
		output_power(2);
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 5b 00 	call	0xb6	; 0xb6 <output_power>
		if (readbit(Keypad_in_pin,4)==0)
 1c6:	cc 99       	sbic	0x19, 4	; 25
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <get_key_value+0x9c>
		{
			key = '1';
			while(readbit(Keypad_in_pin,4)==0);
 1ca:	cc 9b       	sbis	0x19, 4	; 25
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <get_key_value+0x92>
			while(readbit(Keypad_in_pin,7)==0);
		}
		output_power(2);
		if (readbit(Keypad_in_pin,4)==0)
		{
			key = '1';
 1ce:	c1 e3       	ldi	r28, 0x31	; 49
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
 1d2:	14 c0       	rjmp	.+40     	; 0x1fc <get_key_value+0xc4>
			while(readbit(Keypad_in_pin,4)==0);
		}
		else if (readbit(Keypad_in_pin,5)==0)
 1d4:	cd 99       	sbic	0x19, 5	; 25
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <get_key_value+0xaa>
		{
			key = '2';
			while(readbit(Keypad_in_pin,5)==0);
 1d8:	cd 9b       	sbis	0x19, 5	; 25
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <get_key_value+0xa0>
			key = '1';
			while(readbit(Keypad_in_pin,4)==0);
		}
		else if (readbit(Keypad_in_pin,5)==0)
		{
			key = '2';
 1dc:	c2 e3       	ldi	r28, 0x32	; 50
 1de:	d0 e0       	ldi	r29, 0x00	; 0
 1e0:	0d c0       	rjmp	.+26     	; 0x1fc <get_key_value+0xc4>
			while(readbit(Keypad_in_pin,5)==0);
		}
		else if (readbit(Keypad_in_pin,6)==0)
 1e2:	ce 99       	sbic	0x19, 6	; 25
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <get_key_value+0xb8>
		{
			key ='3';
			while(readbit(Keypad_in_pin,6)==0);
 1e6:	ce 9b       	sbis	0x19, 6	; 25
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <get_key_value+0xae>
			key = '2';
			while(readbit(Keypad_in_pin,5)==0);
		}
		else if (readbit(Keypad_in_pin,6)==0)
		{
			key ='3';
 1ea:	c3 e3       	ldi	r28, 0x33	; 51
 1ec:	d0 e0       	ldi	r29, 0x00	; 0
 1ee:	06 c0       	rjmp	.+12     	; 0x1fc <get_key_value+0xc4>
			while(readbit(Keypad_in_pin,6)==0);
		}
		else if (readbit(Keypad_in_pin,7)==0)
 1f0:	cf 99       	sbic	0x19, 7	; 25
 1f2:	04 c0       	rjmp	.+8      	; 0x1fc <get_key_value+0xc4>
		{
			key ='-';
			while(readbit(Keypad_in_pin,7)==0);
 1f4:	cf 9b       	sbis	0x19, 7	; 25
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <get_key_value+0xbc>
			key ='3';
			while(readbit(Keypad_in_pin,6)==0);
		}
		else if (readbit(Keypad_in_pin,7)==0)
		{
			key ='-';
 1f8:	cd e2       	ldi	r28, 0x2D	; 45
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
			while(readbit(Keypad_in_pin,7)==0);
		}
		output_power(3);
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 5b 00 	call	0xb6	; 0xb6 <output_power>
		if (readbit(Keypad_in_pin,4)==0)
 204:	cc 99       	sbic	0x19, 4	; 25
 206:	06 c0       	rjmp	.+12     	; 0x214 <get_key_value+0xdc>
		{
			//key ='C';
			LCD_send_command_4bit(0x01);
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_send_command_4bit>
			while(readbit(Keypad_in_pin,4)==0);
 20e:	cc 9b       	sbis	0x19, 4	; 25
 210:	fe cf       	rjmp	.-4      	; 0x20e <get_key_value+0xd6>
 212:	14 c0       	rjmp	.+40     	; 0x23c <get_key_value+0x104>
		}
		else if (readbit(Keypad_in_pin,5)==0)
 214:	cd 99       	sbic	0x19, 5	; 25
 216:	05 c0       	rjmp	.+10     	; 0x222 <get_key_value+0xea>
		{
			key ='0';
			while(readbit(Keypad_in_pin,5)==0);
 218:	cd 9b       	sbis	0x19, 5	; 25
 21a:	fe cf       	rjmp	.-4      	; 0x218 <get_key_value+0xe0>
			LCD_send_command_4bit(0x01);
			while(readbit(Keypad_in_pin,4)==0);
		}
		else if (readbit(Keypad_in_pin,5)==0)
		{
			key ='0';
 21c:	c0 e3       	ldi	r28, 0x30	; 48
 21e:	d0 e0       	ldi	r29, 0x00	; 0
 220:	0d c0       	rjmp	.+26     	; 0x23c <get_key_value+0x104>
			while(readbit(Keypad_in_pin,5)==0);
		}
		
		else if (readbit(Keypad_in_pin,6)==0)
 222:	ce 99       	sbic	0x19, 6	; 25
 224:	05 c0       	rjmp	.+10     	; 0x230 <get_key_value+0xf8>
		{
			key ='=';
			
			while(readbit(Keypad_in_pin,6)==0);
 226:	ce 9b       	sbis	0x19, 6	; 25
 228:	fe cf       	rjmp	.-4      	; 0x226 <get_key_value+0xee>
			while(readbit(Keypad_in_pin,5)==0);
		}
		
		else if (readbit(Keypad_in_pin,6)==0)
		{
			key ='=';
 22a:	cd e3       	ldi	r28, 0x3D	; 61
 22c:	d0 e0       	ldi	r29, 0x00	; 0
 22e:	06 c0       	rjmp	.+12     	; 0x23c <get_key_value+0x104>
			
			while(readbit(Keypad_in_pin,6)==0);
		}
		
		else if (readbit(Keypad_in_pin,7)==0)
 230:	cf 99       	sbic	0x19, 7	; 25
 232:	04 c0       	rjmp	.+8      	; 0x23c <get_key_value+0x104>
		{
			key = '+' ;
			while(readbit(Keypad_in_pin,7)==0);
 234:	cf 9b       	sbis	0x19, 7	; 25
 236:	fe cf       	rjmp	.-4      	; 0x234 <get_key_value+0xfc>
			while(readbit(Keypad_in_pin,6)==0);
		}
		
		else if (readbit(Keypad_in_pin,7)==0)
		{
			key = '+' ;
 238:	cb e2       	ldi	r28, 0x2B	; 43
 23a:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int get_key_value(void)

{
	unsigned int key = 1 ;
	
	while ( key == 1)
 23c:	c1 30       	cpi	r28, 0x01	; 1
 23e:	d1 05       	cpc	r29, r1
 240:	09 f4       	brne	.+2      	; 0x244 <get_key_value+0x10c>
 242:	7f cf       	rjmp	.-258    	; 0x142 <get_key_value+0xa>
			key = '+' ;
			while(readbit(Keypad_in_pin,7)==0);
		}
	}
	return key;
}
 244:	ce 01       	movw	r24, r28
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <LCD_send_command_4bit>:
	while(str[count]!=0)
	{
		LCD_send_data_4bit(str[count]);
		count++;
	}
}
 24c:	95 b3       	in	r25, 0x15	; 21
 24e:	9f 70       	andi	r25, 0x0F	; 15
 250:	28 2f       	mov	r18, r24
 252:	20 7f       	andi	r18, 0xF0	; 240
 254:	92 2b       	or	r25, r18
 256:	95 bb       	out	0x15, r25	; 21
 258:	92 b3       	in	r25, 0x12	; 18
 25a:	9d 7f       	andi	r25, 0xFD	; 253
 25c:	92 bb       	out	0x12, r25	; 18
 25e:	92 b3       	in	r25, 0x12	; 18
 260:	9b 7f       	andi	r25, 0xFB	; 251
 262:	92 bb       	out	0x12, r25	; 18
 264:	92 b3       	in	r25, 0x12	; 18
 266:	98 60       	ori	r25, 0x08	; 8
 268:	92 bb       	out	0x12, r25	; 18
 26a:	00 00       	nop
 26c:	92 b3       	in	r25, 0x12	; 18
 26e:	97 7f       	andi	r25, 0xF7	; 247
 270:	92 bb       	out	0x12, r25	; 18
 272:	32 e4       	ldi	r19, 0x42	; 66
 274:	3a 95       	dec	r19
 276:	f1 f7       	brne	.-4      	; 0x274 <LCD_send_command_4bit+0x28>
 278:	00 c0       	rjmp	.+0      	; 0x27a <LCD_send_command_4bit+0x2e>
 27a:	25 b3       	in	r18, 0x15	; 21
 27c:	30 e1       	ldi	r19, 0x10	; 16
 27e:	83 9f       	mul	r24, r19
 280:	c0 01       	movw	r24, r0
 282:	11 24       	eor	r1, r1
 284:	92 2f       	mov	r25, r18
 286:	9f 70       	andi	r25, 0x0F	; 15
 288:	89 2b       	or	r24, r25
 28a:	85 bb       	out	0x15, r24	; 21
 28c:	82 b3       	in	r24, 0x12	; 18
 28e:	88 60       	ori	r24, 0x08	; 8
 290:	82 bb       	out	0x12, r24	; 18
 292:	00 00       	nop
 294:	82 b3       	in	r24, 0x12	; 18
 296:	87 7f       	andi	r24, 0xF7	; 247
 298:	82 bb       	out	0x12, r24	; 18
 29a:	89 ef       	ldi	r24, 0xF9	; 249
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_send_command_4bit+0x52>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD_send_command_4bit+0x58>
 2a4:	00 00       	nop
 2a6:	08 95       	ret

000002a8 <LCD_INIT_4bit>:
 2a8:	84 b3       	in	r24, 0x14	; 20
 2aa:	82 60       	ori	r24, 0x02	; 2
 2ac:	84 bb       	out	0x14, r24	; 20
 2ae:	84 b3       	in	r24, 0x14	; 20
 2b0:	84 60       	ori	r24, 0x04	; 4
 2b2:	84 bb       	out	0x14, r24	; 20
 2b4:	84 b3       	in	r24, 0x14	; 20
 2b6:	88 60       	ori	r24, 0x08	; 8
 2b8:	84 bb       	out	0x14, r24	; 20
 2ba:	81 b3       	in	r24, 0x11	; 17
 2bc:	88 60       	ori	r24, 0x08	; 8
 2be:	81 bb       	out	0x11, r24	; 17
 2c0:	81 b3       	in	r24, 0x11	; 17
 2c2:	82 60       	ori	r24, 0x02	; 2
 2c4:	81 bb       	out	0x11, r24	; 17
 2c6:	81 b3       	in	r24, 0x11	; 17
 2c8:	84 60       	ori	r24, 0x04	; 4
 2ca:	81 bb       	out	0x11, r24	; 17
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_send_command_4bit>
 2d2:	88 e2       	ldi	r24, 0x28	; 40
 2d4:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_send_command_4bit>
 2d8:	8c e0       	ldi	r24, 0x0C	; 12
 2da:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_send_command_4bit>
 2de:	86 e0       	ldi	r24, 0x06	; 6
 2e0:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_send_command_4bit>
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_send_command_4bit>
 2ea:	87 e8       	ldi	r24, 0x87	; 135
 2ec:	93 e1       	ldi	r25, 0x13	; 19
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCD_INIT_4bit+0x46>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <LCD_INIT_4bit+0x4c>
 2f4:	00 00       	nop
 2f6:	08 95       	ret

000002f8 <LCD_send_data_4bit>:
 2f8:	95 b3       	in	r25, 0x15	; 21
 2fa:	9f 70       	andi	r25, 0x0F	; 15
 2fc:	28 2f       	mov	r18, r24
 2fe:	20 7f       	andi	r18, 0xF0	; 240
 300:	92 2b       	or	r25, r18
 302:	95 bb       	out	0x15, r25	; 21
 304:	92 b3       	in	r25, 0x12	; 18
 306:	92 60       	ori	r25, 0x02	; 2
 308:	92 bb       	out	0x12, r25	; 18
 30a:	92 b3       	in	r25, 0x12	; 18
 30c:	9b 7f       	andi	r25, 0xFB	; 251
 30e:	92 bb       	out	0x12, r25	; 18
 310:	92 b3       	in	r25, 0x12	; 18
 312:	98 60       	ori	r25, 0x08	; 8
 314:	92 bb       	out	0x12, r25	; 18
 316:	00 00       	nop
 318:	92 b3       	in	r25, 0x12	; 18
 31a:	97 7f       	andi	r25, 0xF7	; 247
 31c:	92 bb       	out	0x12, r25	; 18
 31e:	32 e4       	ldi	r19, 0x42	; 66
 320:	3a 95       	dec	r19
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_send_data_4bit+0x28>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_send_data_4bit+0x2e>
 326:	25 b3       	in	r18, 0x15	; 21
 328:	30 e1       	ldi	r19, 0x10	; 16
 32a:	83 9f       	mul	r24, r19
 32c:	c0 01       	movw	r24, r0
 32e:	11 24       	eor	r1, r1
 330:	92 2f       	mov	r25, r18
 332:	9f 70       	andi	r25, 0x0F	; 15
 334:	89 2b       	or	r24, r25
 336:	85 bb       	out	0x15, r24	; 21
 338:	82 b3       	in	r24, 0x12	; 18
 33a:	88 60       	ori	r24, 0x08	; 8
 33c:	82 bb       	out	0x12, r24	; 18
 33e:	00 00       	nop
 340:	82 b3       	in	r24, 0x12	; 18
 342:	87 7f       	andi	r24, 0xF7	; 247
 344:	82 bb       	out	0x12, r24	; 18
 346:	89 ef       	ldi	r24, 0xF9	; 249
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <LCD_send_data_4bit+0x52>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <LCD_send_data_4bit+0x58>
 350:	00 00       	nop
 352:	08 95       	ret

00000354 <Cursor_pos>:

void Cursor_pos(unsigned char x_pos , unsigned char y_pos) // x_row, y_cloum
{
	uint8_t Adress = 0;
	
	if ( x_pos == 0 )
 354:	88 23       	and	r24, r24
 356:	21 f0       	breq	.+8      	; 0x360 <Cursor_pos+0xc>
	{
		Adress = 0x80;
	}
	
	else if (x_pos == 1)
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	21 f0       	breq	.+8      	; 0x364 <Cursor_pos+0x10>
	}
}

void Cursor_pos(unsigned char x_pos , unsigned char y_pos) // x_row, y_cloum
{
	uint8_t Adress = 0;
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	03 c0       	rjmp	.+6      	; 0x366 <Cursor_pos+0x12>
	
	if ( x_pos == 0 )
	{
		Adress = 0x80;
 360:	80 e8       	ldi	r24, 0x80	; 128
 362:	01 c0       	rjmp	.+2      	; 0x366 <Cursor_pos+0x12>
	}
	
	else if (x_pos == 1)
	{
		Adress = 0xC0;
 364:	80 ec       	ldi	r24, 0xC0	; 192
	}
	
	if ( y_pos < 16 )
 366:	60 31       	cpi	r22, 0x10	; 16
 368:	08 f4       	brcc	.+2      	; 0x36c <Cursor_pos+0x18>
	{
		Adress += y_pos;
 36a:	86 0f       	add	r24, r22
	}
	LCD_send_command_4bit(Adress);
 36c:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_send_command_4bit>
 370:	08 95       	ret

00000372 <main>:
#include "keypad.h"



int main(void)
{
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	00 d0       	rcall	.+0      	; 0x378 <main+0x6>
 378:	00 d0       	rcall	.+0      	; 0x37a <main+0x8>
 37a:	00 d0       	rcall	.+0      	; 0x37c <main+0xa>
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
     LCD_INIT_4bit(); 
 380:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_INIT_4bit>
	 keypad_init(); 
 384:	0e 94 36 00 	call	0x6c	; 0x6c <keypad_init>

    while (1) 
    {
		
		// Key-pad Pushed buttons Variables on the LCD:
		unsigned int First_number  = get_key_value();
 388:	0e 94 9c 00 	call	0x138	; 0x138 <get_key_value>
 38c:	4c 01       	movw	r8, r24
		unsigned char operation  = get_key_value();
 38e:	0e 94 9c 00 	call	0x138	; 0x138 <get_key_value>
 392:	f8 2e       	mov	r15, r24
		unsigned int Second_number = get_key_value();
 394:	0e 94 9c 00 	call	0x138	; 0x138 <get_key_value>
 398:	5c 01       	movw	r10, r24
		unsigned char equal  = get_key_value();
 39a:	0e 94 9c 00 	call	0x138	; 0x138 <get_key_value>
 39e:	e8 2e       	mov	r14, r24
		
		unsigned int add = First_number + Second_number;
 3a0:	64 01       	movw	r12, r8
 3a2:	ca 0c       	add	r12, r10
 3a4:	db 1c       	adc	r13, r11
		unsigned char add_ch[3] = {' '};
 3a6:	1c 82       	std	Y+4, r1	; 0x04
 3a8:	1d 82       	std	Y+5, r1	; 0x05
 3aa:	1e 82       	std	Y+6, r1	; 0x06
 3ac:	80 e2       	ldi	r24, 0x20	; 32
 3ae:	8c 83       	std	Y+4, r24	; 0x04
			
		unsigned int sub = First_number - Second_number;
 3b0:	84 01       	movw	r16, r8
 3b2:	0a 19       	sub	r16, r10
 3b4:	1b 09       	sbc	r17, r11
		unsigned char sub_ch[3] = {' '};
 3b6:	19 82       	std	Y+1, r1	; 0x01
 3b8:	1a 82       	std	Y+2, r1	; 0x02
 3ba:	1b 82       	std	Y+3, r1	; 0x03
 3bc:	89 83       	std	Y+1, r24	; 0x01
		
		//Display the Key-pad Pushed buttons Variables on the LCD:
		LCD_send_data_4bit(First_number);
 3be:	88 2d       	mov	r24, r8
 3c0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_send_data_4bit>
		LCD_send_data_4bit(operation);
 3c4:	8f 2d       	mov	r24, r15
 3c6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_send_data_4bit>
		LCD_send_data_4bit(Second_number);
 3ca:	8a 2d       	mov	r24, r10
 3cc:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_send_data_4bit>
		LCD_send_data_4bit(equal);
 3d0:	8e 2d       	mov	r24, r14
 3d2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_send_data_4bit>
	
	
	// For Addition Operation :
	
		for (int j = 0; j < 4; j++)
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	09 c0       	rjmp	.+18     	; 0x3ee <main+0x7c>
		{
			add_ch[j] = ' ';
 3dc:	e4 e0       	ldi	r30, 0x04	; 4
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	ec 0f       	add	r30, r28
 3e2:	fd 1f       	adc	r31, r29
 3e4:	e8 0f       	add	r30, r24
 3e6:	f9 1f       	adc	r31, r25
 3e8:	20 e2       	ldi	r18, 0x20	; 32
 3ea:	20 83       	st	Z, r18
		LCD_send_data_4bit(equal);
	
	
	// For Addition Operation :
	
		for (int j = 0; j < 4; j++)
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	84 30       	cpi	r24, 0x04	; 4
 3f0:	91 05       	cpc	r25, r1
 3f2:	a4 f3       	brlt	.-24     	; 0x3dc <main+0x6a>
		{
			add_ch[j] = ' ';
		}
	
	if ( (operation ==  '+') && (equal ='=') )
 3f4:	2b e2       	ldi	r18, 0x2B	; 43
 3f6:	f2 12       	cpse	r15, r18
 3f8:	2f c0       	rjmp	.+94     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
	{
		
		Cursor_pos(0,6);
 3fa:	66 e0       	ldi	r22, 0x06	; 6
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	0e 94 aa 01 	call	0x354	; 0x354 <Cursor_pos>
		itoa(add,add_ch,16); // Integer into ASCI
 402:	40 e1       	ldi	r20, 0x10	; 16
 404:	50 e0       	ldi	r21, 0x00	; 0
 406:	be 01       	movw	r22, r28
 408:	6c 5f       	subi	r22, 0xFC	; 252
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	c6 01       	movw	r24, r12
 40e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <itoa>
		for (int j = 0; j < 4; j++)
 412:	c1 2c       	mov	r12, r1
 414:	d1 2c       	mov	r13, r1
 416:	1c c0       	rjmp	.+56     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		{
			if(add_ch[j] < '0' || add_ch[j] > '10')
 418:	e4 e0       	ldi	r30, 0x04	; 4
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	ec 0f       	add	r30, r28
 41e:	fd 1f       	adc	r31, r29
 420:	ec 0d       	add	r30, r12
 422:	fd 1d       	adc	r31, r13
 424:	80 81       	ld	r24, Z
 426:	80 33       	cpi	r24, 0x30	; 48
 428:	20 f4       	brcc	.+8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			LCD_send_data_4bit(' ');
 42a:	80 e2       	ldi	r24, 0x20	; 32
 42c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_send_data_4bit>
 430:	03 c0       	rjmp	.+6      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
			else
			LCD_send_command_4bit(0x80 + 0x40 + 0);// shifting cursor  to 1st  shell  of second line
 432:	80 ec       	ldi	r24, 0xC0	; 192
 434:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_send_command_4bit>
			LCD_send_data_4bit(add_ch[j]);	
 438:	e4 e0       	ldi	r30, 0x04	; 4
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	ec 0f       	add	r30, r28
 43e:	fd 1f       	adc	r31, r29
 440:	ec 0d       	add	r30, r12
 442:	fd 1d       	adc	r31, r13
 444:	80 81       	ld	r24, Z
 446:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_send_data_4bit>
	if ( (operation ==  '+') && (equal ='=') )
	{
		
		Cursor_pos(0,6);
		itoa(add,add_ch,16); // Integer into ASCI
		for (int j = 0; j < 4; j++)
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	c8 1a       	sub	r12, r24
 44e:	d8 0a       	sbc	r13, r24
 450:	94 e0       	ldi	r25, 0x04	; 4
 452:	c9 16       	cp	r12, r25
 454:	d1 04       	cpc	r13, r1
 456:	04 f3       	brlt	.-64     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 458:	2f e7       	ldi	r18, 0x7F	; 127
 45a:	82 e3       	ldi	r24, 0x32	; 50
 45c:	92 e0       	ldi	r25, 0x02	; 2
 45e:	21 50       	subi	r18, 0x01	; 1
 460:	80 40       	sbci	r24, 0x00	; 0
 462:	90 40       	sbci	r25, 0x00	; 0
 464:	e1 f7       	brne	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 468:	00 00       	nop
	_delay_ms(90);
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// For Subtraction Operation :
	
			for (int j =0;j<3;j++)
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	09 c0       	rjmp	.+18     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
			{
				sub_ch[j] = ' ';
 470:	e1 e0       	ldi	r30, 0x01	; 1
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	ec 0f       	add	r30, r28
 476:	fd 1f       	adc	r31, r29
 478:	e8 0f       	add	r30, r24
 47a:	f9 1f       	adc	r31, r25
 47c:	20 e2       	ldi	r18, 0x20	; 32
 47e:	20 83       	st	Z, r18
	_delay_ms(90);
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// For Subtraction Operation :
	
			for (int j =0;j<3;j++)
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	83 30       	cpi	r24, 0x03	; 3
 484:	91 05       	cpc	r25, r1
 486:	a4 f3       	brlt	.-24     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
			{
				sub_ch[j] = ' ';
			}
			
			if ( (operation ==  '-') && (equal ='=') )
 488:	2d e2       	ldi	r18, 0x2D	; 45
 48a:	f2 12       	cpse	r15, r18
 48c:	2d c0       	rjmp	.+90     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
			{
				
				Cursor_pos(0,6);
 48e:	66 e0       	ldi	r22, 0x06	; 6
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	0e 94 aa 01 	call	0x354	; 0x354 <Cursor_pos>
				itoa(sub,sub_ch,16); // Integer into ASCI
 496:	40 e1       	ldi	r20, 0x10	; 16
 498:	50 e0       	ldi	r21, 0x00	; 0
 49a:	be 01       	movw	r22, r28
 49c:	6f 5f       	subi	r22, 0xFF	; 255
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	c8 01       	movw	r24, r16
 4a2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <itoa>
				for (int j =0;j<3;j++)
 4a6:	00 e0       	ldi	r16, 0x00	; 0
 4a8:	10 e0       	ldi	r17, 0x00	; 0
 4aa:	1b c0       	rjmp	.+54     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
				{
					if(sub_ch[j] < '0' || sub_ch[j] > '10')
 4ac:	e1 e0       	ldi	r30, 0x01	; 1
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	ec 0f       	add	r30, r28
 4b2:	fd 1f       	adc	r31, r29
 4b4:	e0 0f       	add	r30, r16
 4b6:	f1 1f       	adc	r31, r17
 4b8:	80 81       	ld	r24, Z
 4ba:	80 33       	cpi	r24, 0x30	; 48
 4bc:	20 f4       	brcc	.+8      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
					LCD_send_data_4bit(' ');
 4be:	80 e2       	ldi	r24, 0x20	; 32
 4c0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_send_data_4bit>
 4c4:	03 c0       	rjmp	.+6      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
					else
					LCD_send_command_4bit(0x80 + 0x40 + 0);// shifting cursor  to 1st  shell  of second line
 4c6:	80 ec       	ldi	r24, 0xC0	; 192
 4c8:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_send_command_4bit>
					LCD_send_data_4bit(sub_ch[j]);
 4cc:	e1 e0       	ldi	r30, 0x01	; 1
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	ec 0f       	add	r30, r28
 4d2:	fd 1f       	adc	r31, r29
 4d4:	e0 0f       	add	r30, r16
 4d6:	f1 1f       	adc	r31, r17
 4d8:	80 81       	ld	r24, Z
 4da:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCD_send_data_4bit>
			if ( (operation ==  '-') && (equal ='=') )
			{
				
				Cursor_pos(0,6);
				itoa(sub,sub_ch,16); // Integer into ASCI
				for (int j =0;j<3;j++)
 4de:	0f 5f       	subi	r16, 0xFF	; 255
 4e0:	1f 4f       	sbci	r17, 0xFF	; 255
 4e2:	03 30       	cpi	r16, 0x03	; 3
 4e4:	11 05       	cpc	r17, r1
 4e6:	14 f3       	brlt	.-60     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4e8:	8f e7       	ldi	r24, 0x7F	; 127
 4ea:	92 e3       	ldi	r25, 0x32	; 50
 4ec:	22 e0       	ldi	r18, 0x02	; 2
 4ee:	81 50       	subi	r24, 0x01	; 1
 4f0:	90 40       	sbci	r25, 0x00	; 0
 4f2:	20 40       	sbci	r18, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 4f8:	00 00       	nop
			
			_delay_ms(90);
	
	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
    }
 4fa:	46 cf       	rjmp	.-372    	; 0x388 <main+0x16>

000004fc <itoa>:
 4fc:	45 32       	cpi	r20, 0x25	; 37
 4fe:	51 05       	cpc	r21, r1
 500:	20 f4       	brcc	.+8      	; 0x50a <itoa+0xe>
 502:	42 30       	cpi	r20, 0x02	; 2
 504:	10 f0       	brcs	.+4      	; 0x50a <itoa+0xe>
 506:	0c 94 89 02 	jmp	0x512	; 0x512 <__itoa_ncheck>
 50a:	fb 01       	movw	r30, r22
 50c:	10 82       	st	Z, r1
 50e:	cb 01       	movw	r24, r22
 510:	08 95       	ret

00000512 <__itoa_ncheck>:
 512:	bb 27       	eor	r27, r27
 514:	4a 30       	cpi	r20, 0x0A	; 10
 516:	31 f4       	brne	.+12     	; 0x524 <__itoa_ncheck+0x12>
 518:	99 23       	and	r25, r25
 51a:	22 f4       	brpl	.+8      	; 0x524 <__itoa_ncheck+0x12>
 51c:	bd e2       	ldi	r27, 0x2D	; 45
 51e:	90 95       	com	r25
 520:	81 95       	neg	r24
 522:	9f 4f       	sbci	r25, 0xFF	; 255
 524:	0c 94 95 02 	jmp	0x52a	; 0x52a <__utoa_common>

00000528 <__utoa_ncheck>:
 528:	bb 27       	eor	r27, r27

0000052a <__utoa_common>:
 52a:	fb 01       	movw	r30, r22
 52c:	55 27       	eor	r21, r21
 52e:	aa 27       	eor	r26, r26
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	aa 1f       	adc	r26, r26
 536:	a4 17       	cp	r26, r20
 538:	10 f0       	brcs	.+4      	; 0x53e <__utoa_common+0x14>
 53a:	a4 1b       	sub	r26, r20
 53c:	83 95       	inc	r24
 53e:	50 51       	subi	r21, 0x10	; 16
 540:	b9 f7       	brne	.-18     	; 0x530 <__utoa_common+0x6>
 542:	a0 5d       	subi	r26, 0xD0	; 208
 544:	aa 33       	cpi	r26, 0x3A	; 58
 546:	08 f0       	brcs	.+2      	; 0x54a <__utoa_common+0x20>
 548:	a9 5d       	subi	r26, 0xD9	; 217
 54a:	a1 93       	st	Z+, r26
 54c:	00 97       	sbiw	r24, 0x00	; 0
 54e:	79 f7       	brne	.-34     	; 0x52e <__utoa_common+0x4>
 550:	b1 11       	cpse	r27, r1
 552:	b1 93       	st	Z+, r27
 554:	11 92       	st	Z+, r1
 556:	cb 01       	movw	r24, r22
 558:	0c 94 ae 02 	jmp	0x55c	; 0x55c <strrev>

0000055c <strrev>:
 55c:	dc 01       	movw	r26, r24
 55e:	fc 01       	movw	r30, r24
 560:	67 2f       	mov	r22, r23
 562:	71 91       	ld	r23, Z+
 564:	77 23       	and	r23, r23
 566:	e1 f7       	brne	.-8      	; 0x560 <strrev+0x4>
 568:	32 97       	sbiw	r30, 0x02	; 2
 56a:	04 c0       	rjmp	.+8      	; 0x574 <strrev+0x18>
 56c:	7c 91       	ld	r23, X
 56e:	6d 93       	st	X+, r22
 570:	70 83       	st	Z, r23
 572:	62 91       	ld	r22, -Z
 574:	ae 17       	cp	r26, r30
 576:	bf 07       	cpc	r27, r31
 578:	c8 f3       	brcs	.-14     	; 0x56c <strrev+0x10>
 57a:	08 95       	ret

0000057c <_exit>:
 57c:	f8 94       	cli

0000057e <__stop_program>:
 57e:	ff cf       	rjmp	.-2      	; 0x57e <__stop_program>
